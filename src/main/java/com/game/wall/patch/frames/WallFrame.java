package com.game.wall.patch.frames;

import com.game.wall.patch.models.FileTableModel;
import com.game.wall.patch.works.PatchFile;
import com.game.wall.patch.works.SearchFile;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.*;
import java.io.File;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class WallFrame extends JFrame {

  private JPanel mainPanel;
  private JButton findButton;
  private JButton patchButton;
  private JPanel buttonPanel;
  private JPanel workPanel;
  private JTextField textField1;
  private JTable table1;
  private JScrollPane scrollPane;
  private FileTableModel fileTableModel;

  public WallFrame() {
    super("Patch for game 'Wall'");
    initUI();
    initListeners();
  }

  private void initListeners() {
    ListSelectionModel cellSelectionModel = table1.getSelectionModel();
    cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    String[] selectedFile = new String[100];

    findButton.addActionListener(
        actionEvent -> {
          JFileChooser fileChooser = new JFileChooser();
          fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          FileNameExtensionFilter filter = new FileNameExtensionFilter("AVI Files", "avi");
          fileChooser.setFileFilter(filter);
          int returnVal = fileChooser.showOpenDialog(WallFrame.this);

          if (returnVal == JFileChooser.APPROVE_OPTION) {

            cellSelectionModel.clearSelection();
            fileTableModel.getDataVector().removeAllElements();
            File file = fileChooser.getSelectedFile();
            textField1.setText(file.getAbsolutePath());

            new SearchFile(file, fileTableModel).execute();
          }
        });

    cellSelectionModel.addListSelectionListener(
        listSelectionEvent -> {
          int selectedRow = table1.getSelectedRow();
          if (selectedRow >= 0) selectedFile[0] = table1.getValueAt(selectedRow, 0).toString();
        });

    patchButton.addActionListener(
        actionEvent -> {
          File path = new File(selectedFile[0]);
          new PatchFile(path).execute();
        });
  }

  private void initUI() {
    setContentPane(mainPanel);
    setSize(new Dimension(1000, 1000));
    setResizable(false);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    fileTableModel = new FileTableModel();
    table1.setModel(fileTableModel);
    scrollPane = new JScrollPane(table1);

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    workPanel.add(scrollPane, gbc);

    setVisible(true);
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridBagLayout());
    mainPanel.setBorder(
        BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
    buttonPanel = new JPanel();
    buttonPanel.setLayout(
        new FormLayout("fill:d:grow", "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.gridheight = 2;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    mainPanel.add(buttonPanel, gbc);
    buttonPanel.setBorder(
        BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(-16777216)), null));
    findButton = new JButton();
    findButton.setText("Find");
    CellConstraints cc = new CellConstraints();
    buttonPanel.add(findButton, cc.xy(1, 1));
    patchButton = new JButton();
    patchButton.setText("Patch");
    buttonPanel.add(patchButton, cc.xy(1, 3));
    workPanel = new JPanel();
    workPanel.setLayout(new GridBagLayout());
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    mainPanel.add(workPanel, gbc);
    workPanel.setBorder(
        BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(-16777216)), null));
    textField1 = new JTextField();
    textField1.setEditable(false);
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    workPanel.add(textField1, gbc);
    final JLabel label1 = new JLabel();
    label1.setText("Path:");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    workPanel.add(label1, gbc);
    table1 = new JTable();
    table1.setBackground(new Color(-1049089));
    table1.setRowSelectionAllowed(true);
    table1.setSelectionBackground(new Color(-1));
    table1.setUpdateSelectionOnSort(false);
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    workPanel.add(table1, gbc);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }
}
